.MODEL SMALL 
.STACK 100h
PULAR_LINHA MACRO
    PUSH AX
    PUSH DX
        MOV AH,2h
        MOV DL,10
        INT 21h

        MOV DL,13
        INT 21h
    POP DX
    POP AX
ENDM
.DATA
    PLAYERBOARD DW 10 DUP( 10 DUP('~'))
    CPUBOARD DW 10 DUP( 10 DUP('1'))
    CPUSECRET DW 10 DUP( 10 DUP('~'))
    SCREEN DW 20 DUP( 10 DUP('~'))
    BOARDSPACE DB 32,32,32,32,32,32,32,'$'
    randomNum DB ?          ; variável para o número aletório

.CODE

UPDATESCREEN PROC
    
    XOR BX,BX
    XOR CX,CX
    XOR DI,DI

REPEAT:
    TEST DI,1
    JZ PLAYER
    LEA DX,CPUBOARD
    JMP CONTINUE

PLAYER:
    LEA DX,PLAYERBOARD
CONTINUE:
    XOR SI,SI
    MOV AH,2h
    ADD DX,CX
    MOV BX,DX
IMPRIME:

    MOV DL,[BX][SI]
    INT 21h

    INC SI
    CMP SI,20
    JNZ IMPRIME
    
SPACE:
    MOV AH,09h
    LEA DX,BOARDSPACE
    INT 21h

    INC DI
    TEST DI,1
    JNZ REPEAT

PULALINHA:
    PULAR_LINHA
    ADD CX,SI
    CMP CX,0C8h
    JNZ REPEAT

    RET
UPDATESCREEN ENDP

; gera um número aleatório entre 0 e 9
RANDOMNUMBER PROC
    MOV AH,0
    INT 1ah

    MOV AX,DX
    XOR DX,DX
    MOV BX,10
    DIV BX
    
    MOV randomNum,DL
    INT 21h
    RET
RANDOMNUMBER ENDP

DELAY PROC
    MOV CX,1
STARTDELAY:
    CMP CX,100
    JE ENDDELAY
    INC CX
    JMP STARTDELAY
ENDDELAY:
    RET
DELAY ENDP

MAIN PROC
    MOV AX,@DATA
    MOV DS,AX
    
    CALL RANDOMNUMBER

    MOV AH,2h
    MOV DL,randomNum
    OR DL,30h
    INT 21h

    CALL UPDATESCREEN

    MOV AH,4ch
    INT 21h
MAIN ENDP
END MAIN